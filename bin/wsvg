#!/usr/bin/env node
'use strict';

var program  = require('commander');
var _ = require('lodash');
var graphviz = require('graphviz');
var wagglySvg = require('./waggly-svg');
var fs = require('fs');
var util = require('util');
var exec = require('child_process').exec;
var spawn = require('child_process').spawn;
var pjson = require('../package.json');


program
    .version(pjson.version)
    .option('-p, --png', "Export to PNG")
    .option('-c, --content <content>', "SVG-content as string input")
    .option('-i, --input <path>', "Input SVG-File which should be turned into a waggly output-version")
    .option('-o, --output <path>', "Output filename")
    .option('-w, --waggly', "Turns on the waggly-mode (without, it won't change anything)")
    .option('--fontFamily <font>', "Set the output font-family (i.e. Purisa - ttf-tlwg)")
    .option('--fontSize <size>', "Set the size of the font to be used")
    .option('--wagInterval <interval>', "Interval for your wags (default is 10)", parseInt)
    .option('--wagSize <interval>', "Size for the wags (default is 1.5)", parseFloat)
    .parse(process.argv);

if (!process.argv.slice(2).length) {
	console.log('No command specified. See \'wagglyuml --help\':');
	program.outputHelp();
	process.exit(1);
}

// console.log("That's your input: " + _.last(process.argv));

var outputName = program.output;
var svgTransformer = wagglySvg.create(
    {
        waggly: program.waggly,
        wag_interval: program.wagInterval || 10,
        wag_size: program.wagSize || 1.5,
        font_family: program.fontFamily || undefined,
        font_size: program.fontSize || undefined
    },
    function(transformed) {
        fs.writeFile(outputName, transformed, function (err) {
            if (err) return console.log(err);
            if (program.png) {
                exec('rsvg-convert -f png -o ' + outputName.replace(/svg$/, 'png') + ' ' + outputName);
            }
        });
    }
);

if (program.input) {
    if (! outputName) { outputName = program.input.replace('svg', 'out.svg'); }
    svgTransformer.transformFile(program.input);
} else if (program.content)  {
    if (! outputName) { outputName = new Date().getTime(); }
    svgTransformer.transformString(program.input);
}
